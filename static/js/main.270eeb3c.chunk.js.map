{"version":3,"sources":["utils/questionConstant.js","components/QuestionForm/QuestionForm.sc.js","components/QuestionForm/QuestionForm.js","pages/QuestionSurvey/QuestionSurvey.sc.js","redux/actionType.js","redux/actions/questionList.js","pages/QuestionSurvey/QuestionSurvey.js","App.js","reportWebVitals.js","redux/reducers/questionList.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["respondentOptions","value","label","StyledDialog","styled","Dialog","ColonText","Typography","StyledDialogTitle","DialogTitle","ButtonAction","Button","QuestionForm","props","handleDeleteRespondentItem","handleEnterAnswerOption","handleClose","handleSave","handleOnchange","isOpen","handleChangeRespondent","isEditMode","questItem","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","PaperProps","classes","root","maxWidth","scroll","open","onClose","id","DialogContent","dividers","Grid","container","direction","spacing","item","xs","TextField","fullWidth","multiline","rows","question","name","onChange","variant","respondent","map","respond","index","md","select","className","optionValue","SelectProps","native","option","Tooltip","arrow","placement","title","disableHoverListener","autoFocus","placeholder","answer","onKeyDown","e","keyCode","window","scrollTo","preventDefault","IconButton","disabled","length","onClick","FormGroup","row","FormControlLabel","style","color","control","Checkbox","checked","allowNone","shuffleOrder","DialogActions","defaultProps","setQuestionText","Wrapper","div","NoData","TitleText","AddButton","ActionButtonWrapper","NumberWrapper","ListItemIcon","AddIcon","Add","HeaderWrapper","ADD_QUESTIONS","SET_QUESTION_LIST","questionAction","payload","type","defaultQuestionData","connect","state","questionData","questionList","questions","dispatch","addNewQuestion","addNewQuestionAction","setQuestionList","setQuestionListAction","enqueueSnackbar","useSnackbar","useState","isQuestionDialogOpen","setIsQuestionDialogOpen","setQuestItem","setIsEditMode","useEffect","isEdit","a","validateEmptyState","questionArray","questionIndex","findIndex","qst","newData","toString","some","resp","justify","startIcon","updateRespondent","target","data","updateData","filter","respondentObj","Date","getTime","respondentArr","isCheckbox","questItemUpdate","src","alt","onDragEnd","result","destination","items","startIndex","endIndex","Array","from","splice","removed","reorder","source","droppableId","provided","snapshot","RootRef","rootRef","innerRef","List","draggableId","ListItem","alignItems","ContainerComponent","divider","ContainerProps","ref","draggableProps","dragHandleProps","isDragging","draggableStyle","background","ListItemText","primary","secondary","order","ListItemSecondaryAction","handleEditQuestionItem","newQuestionData","handleDeleteQuestion","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","reducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","maxSnack","anchorOrigin","horizontal","vertical","document","getElementById"],"mappings":"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","file":"static/js/main.270eeb3c.chunk.js","sourcesContent":["export const respondentOptions = [\n  {\n    value: '0',\n    label: 'May Select',\n  },\n  {\n    value: '1',\n    label: 'Must Select',\n  },\n  {\n    value: '2',\n    label: 'Terminate if Select',\n  },\n];","import styled from 'styled-components'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nexport const StyledDialog = styled(Dialog)`\n  && {\n      .paper-class {\n        padding: 32px;\n        position: unset;\n        height: 600px;\n        width: 900px;\n        box-shadow: none;\n    }\n  }\n`\n\nexport const ColonText = styled(Typography)`\n  && {\n      text-align: end\n  }\n`\n\nexport const StyledDialogTitle = styled(DialogTitle)`\n  && {\n      color: #08767a;\n      font-weight: 600;\n  }\n`\n\n\nexport const ButtonAction = styled(Button)`\n  && {\n      width: 120px;\n      background: #f5d568;\n      color: #08767a;\n\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { useTheme } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/DeleteForeverOutlined'\nimport Grid from '@material-ui/core/Grid';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport { respondentOptions } from '../../utils/questionConstant'\n\nimport { StyledDialog, ColonText, ButtonAction, StyledDialogTitle } from './QuestionForm.sc'\n\nconst QuestionForm = (props) => {\n  const { \n    handleDeleteRespondentItem, \n    handleEnterAnswerOption, \n    handleClose,\n    handleSave,\n    handleOnchange,\n    isOpen,\n    handleChangeRespondent,\n    isEditMode,\n    questItem,\n  } = props\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <div>\n      <StyledDialog \n        PaperProps={{ classes: { root: 'paper-class' } }}\n        maxWidth=\"md\" \n        fullScreen={fullScreen} \n        scroll=\"paper\" \n        open={isOpen} \n        onClose={handleClose}\n      >\n        <StyledDialogTitle id=\"title\">{isEditMode ? 'Edit Question' : 'Add New Question'}</StyledDialogTitle>\n        <DialogContent dividers>\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={2}>\n              <Typography>Question</Typography>\n            </Grid>\n            <Grid item xs={1}>\n              <ColonText>:</ColonText>\n            </Grid>\n\n            {/* question field */}\n            <Grid item xs={9}>\n              <TextField\n                fullWidth\n                multiline\n                rows={4}\n                value={questItem.question}\n                name=\"question\"\n                onChange={handleOnchange(false)}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={2}>\n              <Typography>Respondent Options</Typography>\n            </Grid>\n            <Grid item xs={1}>\n              <ColonText>:</ColonText>\n            </Grid>\n            <Grid item xs={9}>\n                {questItem?.respondent?.map((respond, index) => {\n                  return (\n                  <Grid container spacing={2} key={index}>\n                    {/* respondent field */}\n                    <Grid item md={4} xs={12} key={respond?.id}>\n                      <TextField\n                        select\n                        fullWidth\n                        variant=\"outlined\"\n                        name=\"optionValue\"\n                        className=\"respondentOptions\"\n                        value={respond.optionValue}\n                        onChange={handleChangeRespondent(index)} \n                        SelectProps={{\n                          native: true,\n                        }}\n                      >\n                        {respondentOptions.map((option) => (\n                            <option key={option.value} value={option.value}>\n                              {option.label}\n                            </option>\n                        ))}\n                      </TextField>\n                    </Grid>\n                    \n                    <Grid item md={8} xs={12}>\n                      <Grid container spacing={1} direction=\"row\">\n                        <Grid item xs={10}>\n                          <Tooltip \n                            arrow\n                            placement=\"top-start\"\n                            title=\"please enter to add another option\" \n                            disableHoverListener\n                            >\n                            <TextField\n                              autoFocus={!isEditMode && index !== 0}\n                              fullWidth\n                              variant=\"outlined\"\n                              placeholder=\"Enter to add more answer option\"\n                              value={respond.answer}\n                              name=\"answer\"\n                              onChange={handleChangeRespondent(index)}  \n                              onKeyDown={e => {\n                                if (e.keyCode === 13) {\n                                  window.scrollTo(0, 600)\n                                  e.preventDefault()\n                                  handleEnterAnswerOption()\n                                }\n                              }}\n                            />\n                         </Tooltip>\n                        </Grid>\n                        <Grid item xs={2}>\n                          <IconButton disabled={questItem.respondent.length === 1} id={index} onClick={() => handleDeleteRespondentItem(questItem.respondent, respond.id)}>\n                            <DeleteIcon />\n                          </IconButton>\n                        </Grid>\n                      </Grid>\n\n                    </Grid>\n                  </Grid>\n                    )\n                  })\n                }\n                \n              {/* checkbox */}\n              <FormGroup row>\n                <FormControlLabel\n                  label={<b style={{ color: '#08767a'}}>Allow \"None of the above\"</b>}\n                  control={<Checkbox name=\"allowNone\" checked={questItem.allowNone} onChange={handleOnchange(true)} />}\n                />\n                <FormControlLabel\n                  label={<b style={{ color: '#08767a'}}>Shuffle the order</b>}\n                  control={<Checkbox  name=\"shuffleOrder\" checked={questItem.shuffleOrder} onChange={handleOnchange(true)} />}\n                />\n              </FormGroup>\n            </Grid>\n          </Grid>    \n        </DialogContent>\n        \n        <DialogActions>\n          <ButtonAction onClick={handleClose} variant=\"contained\">Cancel</ButtonAction>\n          <ButtonAction onClick={() => handleSave(isEditMode, questItem.id )} variant=\"contained\">Save</ButtonAction>\n        </DialogActions>  \n\n      </StyledDialog>\n    </div>\n  );\n}\n\n\nQuestionForm.defaultProps = {\n  handleDeleteRespondentItem: () => {},\n  handleEnterAnswerOption: () => {},\n  questItem: {},\n  handleClose: () => {},\n  handleSave: () => {},\n  handleOnchange: () => {},\n  handleChangeRespondent: () => {},\n  setQuestionText: () => {},\n  isOpen: false,\n  isEditMode: false,\n}\n\nQuestionForm.propTypes = {\n  handleDeleteRespondentItem: PropTypes.func,\n  handleEnterAnswerOption: PropTypes.func,\n  questItem: PropTypes.instanceOf(Object),\n  handleClose: PropTypes.func,\n  handleSave: PropTypes.func,\n  handleOnchange: PropTypes.func,\n  handleChangeRespondent: PropTypes.func,\n  setQuestionText: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isEditMode: PropTypes.bool,\n}\n\nexport default QuestionForm\n\n\n","import styled from 'styled-components'\n\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport IconButton from '@material-ui/core/IconButton'\nimport Grid from '@material-ui/core/Grid'\n\nimport Add from '@material-ui/icons/AddRounded'\n\nexport const Wrapper = styled.div`\n  background: #fff;\n  max-width: 900px;\n  width: 100%;\n  min-height: 600px;\n  margin: 0 auto;\n  border-radius: 5px;\n    > div {\n      padding: 16px;\n\n    }\n`\n\n\nexport const NoData = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  height: 300px;\n  color: #08767a;\n  border-radius: 5px;\n  margin: 16px;\n  @media (max-width: 480px) {\n    flex-direction: column;\n  }\n`\n\n\nexport const TitleText = styled(Typography)`\n  && {\n    color: #fff;\n    @media (max-width: 480px) {\n      font-size: 14px;\n    }\n  }\n`\n\n\nexport const AddButton = styled(Button)`\n  && {\n    color: #08767a;\n    border-color: #fff;\n    background:#fff;\n    text-transform: capitalize;\n    @media (max-width: 480px) {\n      font-size: 12px;\n      padding: 4px 10px;\n    }\n  }\n`\n\n\nexport const ActionButtonWrapper = styled(IconButton)`\n  && {\n    > span {\n      color: #08767a\n    }\n  }\n`\n\nexport const NumberWrapper = styled(ListItemIcon)`\n  && {\n    > div {\n      width: 80px;\n      text-align: center;\n      color: #08767a;\n      background-color: #f5d568;\n      text-transform: capitalize;\n      border-radius: 16px;\n      font-size: 12px;\n      padding: 8px;\n      margin-right: 8px\n    }\n  }\n`\n\n\nexport const AddIcon = styled(Add)`\n  && {\n    color: #fff;\n    background: #f5d568;\n    border-radius: 50%;\n    @media (max-width: 480px) {\n      width: 12px;\n      height: 12px;\n      margin-top: -2px;\n    }\n  }\n`\n\nexport const HeaderWrapper = styled(Grid)`\n  && {\n    margin: -30px auto 0px;\n    width: 95%;\n    display: flex;\n    background: #08767a;\n    border-radius: 5px;\n    > div {\n      align-items: center;\n      display: flex;\n    }\n  }\n`\n\n","/**\n * Questions List\n */\n\nexport const ADD_QUESTIONS = 'ADD_QUESTIONS';\nexport const SET_QUESTION_LIST = 'SET_QUESTION_LIST';\n","import { ADD_QUESTIONS, SET_QUESTION_LIST } from '../actionType';\n\nconst questionAction = {\n  addQuestion: payload => ({\n    type: ADD_QUESTIONS,\n    payload,\n  }),\n  resetQuestion: payload => ({\n    type: SET_QUESTION_LIST,\n    payload,\n  }),\n};\n\n\nexport const addNewQuestion = (value) => (dispatch) => {\n  return dispatch(questionAction.addQuestion(value))\n};\n\n\nexport const setQuestionList = (value) => (dispatch) => {\n  return dispatch(questionAction.resetQuestion(value))\n};\n\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux';\n\nimport Grid from '@material-ui/core/Grid'\nimport { useSnackbar } from 'notistack';\n\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n} from \"@material-ui/core\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/DeleteSweep\";\n\nimport QuestionForm from '../../components/QuestionForm/QuestionForm'\n\nimport { \n  Wrapper, \n  NoData,\n  TitleText, \n  AddButton, \n  AddIcon, \n  NumberWrapper, \n  ActionButtonWrapper,\n  HeaderWrapper,\n} from './QuestionSurvey.sc'\n\nimport { \n  addNewQuestion as addNewQuestionAction, \n  setQuestionList as setQuestionListAction \n} from '../../redux/actions/questionList';\n\n\n\nconst defaultQuestionData = {\n  id: 1,\n  question: '',\n  respondent: [{\n    id: 0,\n    optionValue: '0',\n    answer: ''\n  }],\n  allowNone: false,\n  shuffleOrder: false,\n}\n\n\nconst QuestionSurvey = (props) => {\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = useState(false)\n  const [questItem, setQuestItem] = useState(defaultQuestionData)\n  const [isEditMode, setIsEditMode] = useState(false)\n  \n  useEffect(() => {\n      if (!isEditMode) {\n        setQuestItem({\n          id: 1,\n          question: '',\n          respondent: [{\n            id: 0,\n            optionValue: '0',\n            answer: ''\n          }],\n          allowNone: false,\n          shuffleOrder: false,\n        })\n      }\n\n      if (!isQuestionDialogOpen) {\n        setIsEditMode(false)\n      }\n\n  }, [isEditMode, isQuestionDialogOpen])\n\n  // handle onChage respondent data\n  const handleChangeRespondent = (index) => e  => {\n    const updateRespondent = questItem.respondent;\n    updateRespondent[index][e.target.name] = e.target.value;\n    setQuestItem({...questItem, respondent: [...updateRespondent] })\n  }\n\n  // handle onChage data quesiton line\n  const handleOnchange = (isCheckbox) => e =>  {\n    const { name, value, checked = false } = e.target\n    const questItemUpdate = {...questItem}\n    questItemUpdate[name] = !isCheckbox ? value : checked\n    setQuestItem(questItemUpdate)\n  }\n\n  // handle add new respondent field\n  const handleEnterAnswerOption = () => {\n    // i use getTime() as id value because user can enter in any index respondent field\n    // so it will make it easer when deleting the respondent item by filter by id\n    const id = new Date().getTime()\n    const respondentObj = {\n      id,\n      optionValue: '0',\n      answer: ''\n    }\n\n    const respondentArr = [...questItem.respondent, respondentObj] \n    setQuestItem({...questItem, respondent: respondentArr })\n  }\n\n  // handle delete respondent data\n  const handleDeleteRespondentItem = (data, id) => {\n    if (data.length === 1) return\n    const updateData = questItem.respondent.filter(item => item.id !== id)\n    return setQuestItem({...questItem, respondent: updateData })\n  };\n\n\n  // reordering result list\n  const reorder = (questionList, startIndex, endIndex) => {\n    const result = Array.from(questionList);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  // styling on dragging\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    ...draggableStyle,\n    ...(isDragging && {\n      background: \"rgb(235,235,235)\"\n    })\n  });\n\n  // handle reorder data\n  const handleHasDragged = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      props.questionData,\n      result.source.index,\n      result.destination.index\n    );\n\n    // replace quesitons list with new order\n    props.setQuestionList(items)\n  }\n\n  // handle submit question\n  const handleSave = async (isEdit, id) => {\n    const isNotValid = validateEmptyState()\n    \n    if (isNotValid) {\n      return enqueueSnackbar('Please fill the empty field', { variant: 'error' })\n    } \n\n    if (isEdit) {\n      const questionArray = [...props.questionData]\n      const questionIndex = props.questionData.findIndex((qst => qst.id === id));\n      questionArray[questionIndex] = questItem\n      props.setQuestionList(questionArray)\n    } else {\n      const newData = {...questItem}\n      const id = props.questionData.length + 1\n      newData['id'] = id.toString()\n      props.addNewQuestion(newData)\n    }\n\n    await enqueueSnackbar('Question Added !', { variant: 'success' })\n    setIsQuestionDialogOpen(false)\n\n  }\n\n  const handleCloseDialog = () => {\n    setIsQuestionDialogOpen(false)\n  }\n\n  // delete question item list\n  const handleDeleteQuestion = (id) => {\n    const newQuestionData = props.questionData.filter(item => item.id !== id)\n    props.setQuestionList(newQuestionData);\n    enqueueSnackbar(`Question deleted successfully !`, { variant: 'success' })\n   };\n \n  //  open dialog to edit question\n  const handleEditQuestionItem = (item) => {\n    setQuestItem(item)\n    setIsEditMode(true)\n    setIsQuestionDialogOpen(true)\n  }\n\n  const validateEmptyState = () => {\n    const isNotValid = questItem.question === '' || questItem.respondent.some(resp => resp.answer === '');\n    return isNotValid\n  }\n\n  return (\n    <Wrapper>\n      <HeaderWrapper container justify=\"space-between\">\n        <Grid item>\n          <TitleText variant=\"h5\">\n            Question Survey\n          </TitleText>\n        </Grid>\n        <Grid item>\n          <AddButton \n            onClick={() => {\n              setIsQuestionDialogOpen(true)\n            }\n            } \n            variant=\"contained\"\n            startIcon={<AddIcon />}\n          >\n            Add Question\n          </AddButton>\n        </Grid>\n      </HeaderWrapper>\n\n      \n      \n      <QuestionForm \n        handleClose={handleCloseDialog}\n        handleChangeRespondent={handleChangeRespondent}\n        handleDeleteRespondentItem={handleDeleteRespondentItem}\n        handleEnterAnswerOption={handleEnterAnswerOption}\n        handleOnchange={handleOnchange}\n        handleSave={handleSave}\n        isEditMode={isEditMode}\n        isOpen={isQuestionDialogOpen}\n        questItem={questItem}\n      />\n\n      {props.questionData.length === 0 && \n        <NoData>\n          <img src=\"https://assets.getcraft.com/images/asset-q2-2018/not-found-icon.svg\" alt=\"empty\" />\n          <p>Question box is empty</p>\n        </NoData> \n      }\n\n     <div>\n        <DragDropContext onDragEnd={handleHasDragged}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <RootRef rootRef={provided.innerRef}>\n              <List>\n                {props.questionData.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <ListItem\n                        alignItems=\"center\"\n                        ContainerComponent=\"li\"\n                        divider\n                        ContainerProps={{ ref: provided.innerRef }}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <NumberWrapper>\n                          <div>{`Question #${index + 1}`}</div>\n                        </NumberWrapper>\n                        \n                        <ListItemText\n                          primary={item.question}\n                          secondary={item.order}\n                        />\n\n                        <ListItemSecondaryAction>\n                          <ActionButtonWrapper onClick={() => handleEditQuestionItem(item)}>\n                            <EditIcon />\n                          </ActionButtonWrapper>\n                          <ActionButtonWrapper onClick={() => handleDeleteQuestion(item.id)}>\n                            <DeleteIcon />\n                          </ActionButtonWrapper>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    )}\n                  </Draggable>\n                ))}\n              </List>\n            </RootRef>\n          )}\n        </Droppable>\n      </DragDropContext>\n                      \n    </div>\n   \n    </Wrapper>\n  );\n\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    questionData: state.questionList.questions,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addNewQuestion: (value) => dispatch(addNewQuestionAction(value)),\n    setQuestionList: (value) =>  dispatch(setQuestionListAction(value))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionSurvey)\n\n\n","import './App.css';\nimport QuestionSurvey from './pages/QuestionSurvey/QuestionSurvey'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <QuestionSurvey />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_QUESTIONS, SET_QUESTION_LIST} from '../actionType';\n\nconst questionList = (state = {\n  questions: [],\n}, action) => {\n\n  const { type, payload } = action;\n\n  switch (type) {\n    case ADD_QUESTIONS: \n    return {\n      ...state,\n      questions: [...state.questions, payload]\n    }\n    case SET_QUESTION_LIST: \n    return {\n      ...state,\n      questions: payload\n    }\n    default: {\n      return state;\n    }\n  }\n\n};\n\nexport default questionList;\n","import { combineReducers } from 'redux';\nimport questionList from './questionList';\n\nconst reducer = combineReducers({\n  questionList,\n});\n\nexport default reducer;\n","// External\nimport {\n  createStore, applyMiddleware, compose\n} from 'redux';\n\nimport thunk from 'redux-thunk';\n\n\n// Shared Data\nimport rootReducer from '../redux/reducers';\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { SnackbarProvider } from \"notistack\";\nimport store from './redux/store';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <SnackbarProvider maxSnack={3} anchorOrigin={{horizontal: 'right', vertical: 'top'} }>\n      <App />\n    </SnackbarProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}